/* SequenceAllInOneParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SequenceAllInOneParserTokenManager.java */
package com.baselet.element.sequence_aio.facet.specific.gen;
import com.baselet.control.enums.LineType;
import com.baselet.element.sequence_aio.facet.Lifeline;
import com.baselet.element.sequence_aio.facet.Message.ArrowType;
import com.baselet.element.sequence_aio.facet.SequenceDiagramBuilder;
import com.baselet.element.sequence_aio.facet.SequenceDiagramException;
import com.baselet.util.logging.Logger;
import com.baselet.util.logging.LoggerFactory;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SequenceAllInOneParserTokenManager implements SequenceAllInOneParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fff800001fc0L) != 0L)
         {
            jjmatchedKind = 53;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fff800001fc0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 5;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fbf800001fc0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0x7d3d000000ec0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 5;
         }
         if ((active0 & 0x2800000100L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active0 & 0x653c0000004c0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active0 & 0x1000000200L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x653c0000000c0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
            return 5;
         }
         return -1;
      case 6:
         if ((active0 & 0x653c0000000c0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 6;
            return 5;
         }
         return -1;
      case 7:
         if ((active0 & 0x643c0000000c0L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
            return 5;
         }
         return -1;
      case 8:
         if ((active0 & 0x643c000000040L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
            return 5;
         }
         return -1;
      case 9:
         if ((active0 & 0x642c000000040L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
            return 5;
         }
         return -1;
      case 10:
         if ((active0 & 0x242c000000040L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 10;
            return 5;
         }
         return -1;
      case 11:
         if ((active0 & 0x2424000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 11;
            return 5;
         }
         return -1;
      case 12:
         if ((active0 & 0x2024000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 12;
            return 5;
         }
         return -1;
      case 13:
         if ((active0 & 0x2020000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 13;
            return 5;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 14;
            return 5;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 15;
            return 5;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 43:
         return jjStopAtPos(0, 34);
      case 44:
         return jjStopAtPos(0, 22);
      case 45:
         return jjStopAtPos(0, 26);
      case 46:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_4(0x10000000L);
      case 58:
         return jjStopAtPos(0, 21);
      case 59:
         return jjStopAtPos(0, 25);
      case 60:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_4(0x80000000L);
      case 61:
         return jjStopAtPos(0, 29);
      case 62:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_4(0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa1_4(0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_4(0x640c000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_4(0x100000000800L);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x1000000200L);
      case 103:
         return jjMoveStringLiteralDfa1_4(0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_4(0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_4(0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa1_4(0xc0000001040L);
      case 114:
         return jjMoveStringLiteralDfa1_4(0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_4(0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_4(0x1800000000500L);
      case 123:
         return jjStopAtPos(0, 23);
      case 125:
         return jjStopAtPos(0, 24);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000000L);
      case 62:
         return jjMoveStringLiteralDfa2_4(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x2000000200L);
      case 98:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0xb00000000800L);
      case 102:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000000000400L);
      case 110:
         return jjMoveStringLiteralDfa2_4(active0, 0x50000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x640d800000000L);
      case 114:
         return jjMoveStringLiteralDfa2_4(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa2_4(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_4(active0, 0x80L);
      case 118:
         return jjMoveStringLiteralDfa2_4(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         break;
      case 61:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_4(active0, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_4(active0, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa3_4(active0, 0x280000000000L);
      case 106:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x4400000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_4(active0, 0xc000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_4(active0, 0x100800000800L);
      case 116:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000480L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000000100L);
      case 118:
         return jjMoveStringLiteralDfa3_4(active0, 0x10000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_4(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_4(active0, 0x10000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_4(active0, 0x2000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_4(active0, 0x800L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_4(3, 8, 5);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_4(3, 37, 5);
         return jjMoveStringLiteralDfa4_4(active0, 0xc000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_4(active0, 0x1000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_4(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_4(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_4(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_4(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa4_4(active0, 0x4000000000200L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_4(3, 35, 5);
         return jjMoveStringLiteralDfa4_4(active0, 0xd20000000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(4, 11);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         break;
      case 84:
         return jjMoveStringLiteralDfa5_4(active0, 0x80L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_4(4, 36, 5);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_4(4, 9, 5);
         return jjMoveStringLiteralDfa5_4(active0, 0x20000000400L);
      case 103:
         return jjMoveStringLiteralDfa5_4(active0, 0xc000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_4(active0, 0x2400000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_4(active0, 0x110000000040L);
      case 116:
         return jjMoveStringLiteralDfa5_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(3, active0);
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_4(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_4(active0, 0x1c0000000c0L);
      case 110:
         return jjMoveStringLiteralDfa6_4(active0, 0x2400000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_4(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(4, active0);
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_4(active0, 0x4010000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_4(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa7_4(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa7_4(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_4(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_4(active0, 0xc000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_4(active0, 0x400000000000L);
      case 121:
         return jjMoveStringLiteralDfa7_4(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_4(5, active0);
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_4(active0, 0x400000000000L);
      case 100:
         return jjMoveStringLiteralDfa8_4(active0, 0x2000000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_4(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa8_4(active0, 0x4000000000000L);
      case 107:
         return jjMoveStringLiteralDfa8_4(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa8_4(active0, 0x1c000000000L);
      case 118:
         return jjMoveStringLiteralDfa8_4(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_4(6, active0);
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(8, 7);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_4(active0, 0x8000000000L);
      case 70:
         return jjMoveStringLiteralDfa9_4(active0, 0x2000000000000L);
      case 73:
         return jjMoveStringLiteralDfa9_4(active0, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa9_4(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_4(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_4(active0, 0x4000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_4(active0, 0x410000000000L);
      default :
         break;
   }
   return jjStartNfa_4(7, active0);
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(9, 40);
         break;
      case 100:
         return jjMoveStringLiteralDfa10_4(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa10_4(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_4(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_4(active0, 0x2020000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_4(active0, 0x4004000000000L);
      default :
         break;
   }
   return jjStartNfa_4(8, active0);
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_4(active0, 0x2004000000000L);
      case 100:
         return jjMoveStringLiteralDfa11_4(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_4(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_4(active0, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa11_4(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_4(9, active0);
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(11, 6);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_4(active0, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa12_4(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_4(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa12_4(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_4(10, active0);
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(12, 46);
         break;
      case 109:
         return jjMoveStringLiteralDfa13_4(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_4(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_4(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_4(11, active0);
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(13, 38);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_4(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_4(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_4(12, active0);
}
private int jjMoveStringLiteralDfa14_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(14, 41);
         break;
      case 110:
         return jjMoveStringLiteralDfa15_4(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(13, active0);
}
private int jjMoveStringLiteralDfa15_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa16_4(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(14, active0);
}
private int jjMoveStringLiteralDfa16_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(16, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_4(15, active0);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(0); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 52)
                     kind = 52;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 7:
                  if (curChar != 47)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(5); }
                  break;
               case 8:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x6L) != 0L)
            return 8;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_3(0, 2, 8);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_3(0x10L);
      case 32:
         return jjStartNfaWithStates_3(0, 1, 8);
      default :
         return jjMoveNfa_3(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  if (curChar == 47)
                     { jjAddStates(2, 3); }
                  break;
               case 8:
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 4:
                  if (curChar != 47)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x400010000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 9);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 9);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 0:
                  if ((0xf7ffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 4:
                  if ((0xf7ffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  if (curChar == 47)
                     { jjAddStates(7, 8); }
                  break;
               case 2:
                  if (curChar == 59)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 5:
                  if (curChar != 47)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0xbfffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  else if (curChar == 126)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0xbfffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xbfffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x5000400010000000L & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 3:
                  if (curChar == 126 && kind > 55)
                     kind = 55;
                  break;
               case 6:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 2, 8);
      case 32:
         return jjStartNfaWithStates_1(0, 1, 8);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xf7ffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  if (curChar == 47)
                     { jjAddStates(2, 3); }
                  break;
               case 8:
               case 0:
                  if ((0xf7ffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 2:
                  if (curChar != 59)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 4:
                  if (curChar != 47)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x400010000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 53;
            return 14;
         }
         if ((active0 & 0x6L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 14;
         }
         return -1;
      case 3:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x10000L) != 0L)
            return 14;
         if ((active0 & 0xe0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
            return 14;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000L) != 0L)
            return 14;
         if ((active0 & 0xc0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
            return 14;
         }
         return -1;
      case 6:
         if ((active0 & 0xc0000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 6;
            return 14;
         }
         return -1;
      case 7:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
            return 14;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 15;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000L) != 0L)
            return 14;
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 15;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 15;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 15;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 15;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_2(0, 2, 15);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 15);
      case 65:
         return jjMoveStringLiteralDfa1_2(0x30000L);
      case 67:
         return jjMoveStringLiteralDfa1_2(0x40000L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0x80000L);
      case 124:
         return jjStopAtPos(0, 15);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa2_2(active0, 0x30000L);
      case 82:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L);
      case 88:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_2(active0, 0xc0000L);
      case 84:
         return jjMoveStringLiteralDfa3_2(active0, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000L);
      case 67:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa4_2(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 14);
         break;
      case 84:
         return jjMoveStringLiteralDfa5_2(active0, 0x40000L);
      case 85:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000L);
      case 86:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(5, 17, 14);
         return jjMoveStringLiteralDfa6_2(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa6_2(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_2(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa7_2(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa8_2(active0, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa8_2(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa9_2(active0, 0x40000L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(8, 19, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_2(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_2(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_2(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0);
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(12, 18, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_2(11, active0);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(8); }
                  }
                  break;
               case 15:
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 1:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  break;
               case 10:
                  if (curChar != 47)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xafffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(8); }
                  }
                  break;
               case 14:
                  if ((0xafffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 126)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(8); }
                  }
                  break;
               case 15:
                  if ((0xafffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 126)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 3:
                  if ((0xafffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x5000400010000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 6:
                  if (curChar == 126 && kind > 20)
                     kind = 20;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(8); }
                  break;
               case 11:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 11:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\157\166\145\162\162\151\144\145\111\144\163\75", "\141\165\164\157\124\151\143\153\75", "\164\162\165\145", 
"\146\141\154\163\145", "\164\151\164\154\145\75", "\144\145\163\143\75", "\157\142\152\75", null, 
null, "\174", "\101\103\124\117\122", "\101\103\124\111\126\105", 
"\103\122\105\101\124\105\104\137\114\101\124\105\122", "\105\130\105\103\125\124\111\117\116", null, "\72", "\54", "\173", "\175", 
"\73", "\55", "\56", "\56\56", "\75", "\74", "\74\74\74", "\76", "\76\76\76", "\53", 
"\154\157\163\164", "\146\157\165\156\144", "\147\141\164\145", 
"\143\157\162\145\147\151\157\156\123\164\141\162\164\75", "\143\157\162\145\147\151\157\156\105\156\144\75", 
"\151\156\166\141\162\151\141\156\164\75", "\163\164\141\164\145\111\156\166\141\162\151\141\156\164\75", "\157\156\75", 
"\157\146\146\75", "\144\145\163\164\162\157\171\75", "\162\145\146\75", 
"\143\157\156\164\151\156\165\141\164\151\157\156\75", "\164\145\170\164\75", "\164\151\143\153\75", 
"\143\157\155\142\151\156\145\144\106\162\141\147\155\145\156\164\75", "\143\157\156\163\164\162\141\151\156\164\75", null, null, null, null, null, 
null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   7, 9, 4, 6, 0, 1, 3, 5, 7, 3, 4, 6, 10, 12, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 4;
int defaultLexState = 4;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SequenceAllInOneParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SequenceAllInOneParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "CF_OPERATOR",
   "DIAGRAM_SEQ_TEXT",
   "LIFELINE_DEF",
   "DIAGRAM_DEF_TEXT",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 3, 3, 2, -1, 4, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
   -1, -1, -1, -1, 4, 4, -1, -1, 
};
static final long[] jjtoToken = {
   0x2ffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x10000000000003eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[14];
    private final int[] jjstateSet = new int[2 * 14];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}

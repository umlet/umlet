/* SequenceAllInOneParser.java */
/* Generated By:JavaCC: Do not edit this line. SequenceAllInOneParser.java */
package com.baselet.element.sequence_aio.facet.specific.gen;

import com.baselet.control.enums.LineType;
import com.baselet.element.sequence_aio.facet.Lifeline;
import com.baselet.element.sequence_aio.facet.Message.ArrowType;
import com.baselet.element.sequence_aio.facet.SequenceDiagramBuilder;
import com.baselet.element.sequence_aio.facet.SequenceDiagramException;

import com.baselet.util.logging.Logger;
import com.baselet.util.logging.LoggerFactory;

public class SequenceAllInOneParser implements SequenceAllInOneParserConstants {
        private static final Logger log = LoggerFactory.getLogger(SequenceAllInOneParser.class);

        private boolean autoTick;

        /**
	* Replaces "\\\\" with "\\" in the output so that any further specified match replace pair can't match the replaced "\\".
	* @param matchReplacePairs
	* @return the string with the replacements
	*/
        public static String backslashReplace(String input, String... matchReplacePairs) {
                if (matchReplacePairs.length % 2 == 1) {
                        throw new IllegalArgumentException("matchReplacePairs must have an even number of elements.");
                }
                String split = "\\\\";
                StringBuilder strBuilder = new StringBuilder(input.length());
                int firstIndex = 0;
                // use the indexOf function instead of a split, because split uses regex and regex is not 100% supported by GWT
                int foundIndex = input.indexOf(split, firstIndex);
                while (firstIndex < input.length()) {
                        int lastIndex = foundIndex == -1 ? input.length() : foundIndex;
                        String tmp = input.substring(firstIndex, lastIndex);
                        for (int j = 0; j < matchReplacePairs.length - 1; j += 2) {
                                tmp = tmp.replace(matchReplacePairs[j], matchReplacePairs[j + 1]);
                        }
                        strBuilder.append(tmp);
                        if (foundIndex != -1) {
                                strBuilder.append('\\');
                        }
                        firstIndex = lastIndex + split.length();
                        foundIndex = input.indexOf(split, firstIndex);
                }
                return strBuilder.toString();
        }

        /**
	 * Small data container to pass all informations.
	 */
        private class MessageArrowInfo {
                boolean fromLeftToRight;
                LineType lineType;
                ArrowType arrowType;
        }

        private class InteractionConstraint {
                private String lifelineId = null;
                private String text = "";
        }

        private class LifelineInterval {
                private String startId;
                private String endId;
        }

/**
 * The main function which parses the whole diagram.
 * Line comments are skipped (see Tokens)
 */
  final public SequenceDiagramBuilder start() throws ParseException {String titleText = "";
        String descText = "";
        SequenceDiagramBuilder diagram  = new SequenceDiagramBuilder();
        autoTick = true;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIAGRAM_TITLE:{
        titleText = DiagramTitle();
        break;
        }
      case DIAGRAM_DESC:{
        descText = DiagramDescription();
        break;
        }
      case DIAGRAM_OPTION_OVERRIDE_ID:
      case DIAGRAM_OPTION_AUTO_TICK:{
        Option(diagram);
        jj_consume_token(DEFAULT_NEW_LINE);
        break;
        }
      case LIFELINE_DEFINITIONS:{
        LifelineDefinitions(diagram);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIAGRAM_OPTION_OVERRIDE_ID:
      case DIAGRAM_OPTION_AUTO_TICK:
      case DIAGRAM_TITLE:
      case DIAGRAM_DESC:
      case LIFELINE_DEFINITIONS:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    Sequence(diagram);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAST_LINE_COMMENT:{
      jj_consume_token(LAST_LINE_COMMENT);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
diagram.setTitle(titleText);
                diagram.setText(descText);
                return diagram;
}

  final public String DiagramTitle() throws ParseException {String text = "";
    jj_consume_token(DIAGRAM_TITLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIAGRAM_DEFINITION_TEXT:{
      jj_consume_token(DIAGRAM_DEFINITION_TEXT);
text = backslashReplace(token.image, "\\n","\n");
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
return text;
}

  final public String DiagramDescription() throws ParseException {String desc = "";
    jj_consume_token(DIAGRAM_DESC);
    jj_consume_token(DIAGRAM_DEFINITION_TEXT);
desc = backslashReplace(token.image, "\\n","\n");
return desc;
}

/**
 * Options for the whole diagram
 */
  final public void Option(SequenceDiagramBuilder diagram) throws ParseException {boolean overrideIds;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIAGRAM_OPTION_OVERRIDE_ID:{
      jj_consume_token(DIAGRAM_OPTION_OVERRIDE_ID);
      overrideIds = booleanConstant();
diagram.setOverrideDefaultIds(overrideIds);
      break;
      }
    case DIAGRAM_OPTION_AUTO_TICK:{
      jj_consume_token(DIAGRAM_OPTION_AUTO_TICK);
      autoTick = booleanConstant();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Defines all Lifelines
 */
  final public void LifelineDefinitions(SequenceDiagramBuilder diagram) throws ParseException {
    jj_consume_token(LIFELINE_DEFINITIONS);
    LifelineDef(diagram);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIFELINE_DEF_DELIMITER:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(LIFELINE_DEF_DELIMITER);
      LifelineDef(diagram);
    }
    jj_consume_token(LL_DEF_NEW_LINE);
}

/**
 * Defines one Lifeline, the id can't be LIFELINE_ACTOR, LIFELINE_ACTIVE
 * or LIFELINE_CREATED_LATER because these are keywords.
 */
  final public void LifelineDef(SequenceDiagramBuilder diagram) throws ParseException {String name = "";
        String id = null;
        boolean createdOnStart = true;
        Lifeline.LifelineHeadType headType = Lifeline.LifelineHeadType.STANDARD;
        boolean execSpecFromStart = false;
    name = LifelineDefTitleText();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIFELINE_ID:{
      id = LifelineId();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIFELINE_ACTOR:
      case LIFELINE_ACTIVE:
      case LIFELINE_CREATED_LATER:
      case LIFELINE_EXEC_SPEC_FROM_START:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIFELINE_ACTOR:{
        jj_consume_token(LIFELINE_ACTOR);
headType = Lifeline.LifelineHeadType.ACTOR;
        break;
        }
      case LIFELINE_ACTIVE:{
        jj_consume_token(LIFELINE_ACTIVE);
headType = Lifeline.LifelineHeadType.ACTIVE_CLASS;
        break;
        }
      case LIFELINE_CREATED_LATER:{
        jj_consume_token(LIFELINE_CREATED_LATER);
createdOnStart = false;
        break;
        }
      case LIFELINE_EXEC_SPEC_FROM_START:{
        jj_consume_token(LIFELINE_EXEC_SPEC_FROM_START);
execSpecFromStart = true;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if("lost".equals(id) || "found".equals(id)) {
                        {if (true) throw new SequenceDiagramException("'lost' and 'found' are keywords and can not be used as lifeline identifiers.");}
                }
                diagram.addLiveline(name, id, headType, createdOnStart, execSpecFromStart);
}

/** can could be multiple lines */
  final public String LifelineDefTitleText() throws ParseException {
    jj_consume_token(LIFELINE_TITLE);
/* remove trailing ~ and handle the escaping of \, |, n and ~ */
                return backslashReplace(token.image.substring(0, token.image.length() - 1), "\\n", "\n", "\\~", "~", "\\|", "|");
}

/**
 * Can't be one of the following, because these are keywords in the lifeline definition!
 * < LIFELINE_ACTOR: "ACTOR" >
 * < LIFELINE_ACTIVE: "ACTIVE" >
 * < LIFELINE_CREATED_LATER :"CREATED_LATER" >
 */
  final public String LifelineId() throws ParseException {
    jj_consume_token(LIFELINE_ID);
return token.image;
}

  final public void Sequence(SequenceDiagramBuilder diagram) throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_DASH:
      case T_DDOT:
      case LOST:
      case FOUND:
      case GATE:
      case START_COREGION:
      case END_COREGION:
      case INVARIANT:
      case STATE_INVARIANT:
      case EXEC_SPEC_START:
      case EXEC_SPEC_END:
      case LL_DESTROY:
      case REF:
      case CONTINUATION:
      case TEXT_ON_LIFELINE:
      case TICK:
      case COMBINED_FRAGMENT:
      case DEFAULT_NEW_LINE:
      case LIFELINE_ID:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TICK:{
        SequenceTick(diagram);
        jj_consume_token(DEFAULT_NEW_LINE);
        break;
        }
      case T_DASH:
      case T_DDOT:
      case LOST:
      case FOUND:
      case GATE:
      case START_COREGION:
      case END_COREGION:
      case INVARIANT:
      case STATE_INVARIANT:
      case EXEC_SPEC_START:
      case EXEC_SPEC_END:
      case LL_DESTROY:
      case REF:
      case CONTINUATION:
      case TEXT_ON_LIFELINE:
      case COMBINED_FRAGMENT:
      case LIFELINE_ID:{
        SequenceElement(diagram);
        label_5:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(COMMAND_DELIMITER);
          SequenceElement(diagram);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMAND_DELIMITER:{
          jj_consume_token(COMMAND_DELIMITER);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(DEFAULT_NEW_LINE);
if(autoTick) { diagram.tick(); }
        break;
        }
      case DEFAULT_NEW_LINE:{
        jj_consume_token(DEFAULT_NEW_LINE);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void SequenceTick(SequenceDiagramBuilder diagram) throws ParseException {int tickCount = 1;
    jj_consume_token(TICK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED_INT_CONSTANT:{
      tickCount = unsignedIntConstant();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
diagram.tick(tickCount);
}

  final public void SequenceElement(SequenceDiagramBuilder diagram) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOST:
    case FOUND:
    case GATE:
    case TEXT_ON_LIFELINE:
    case LIFELINE_ID:{
      MessageOrGeneralOrderingOrText(diagram);
      break;
      }
    case START_COREGION:
    case END_COREGION:{
      Coregion(diagram);
      break;
      }
    case LL_DESTROY:{
      DestroyLL(diagram);
      break;
      }
    case EXEC_SPEC_START:
    case EXEC_SPEC_END:{
      ExecutionSpecification(diagram);
      break;
      }
    case INVARIANT:
    case STATE_INVARIANT:{
      StateInvariant(diagram);
      break;
      }
    case REF:{
      InteractionUse(diagram);
      break;
      }
    case CONTINUATION:{
      Continuation(diagram);
      break;
      }
    case T_DASH:
    case T_DDOT:
    case COMBINED_FRAGMENT:{
      CombinedFragment(diagram);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void MessageOrGeneralOrderingOrText(SequenceDiagramBuilder diagram) throws ParseException {
    if (jj_2_2(2)) {
      TextOnLifeline(diagram);
    } else if (jj_2_3(5)) {
      Message(diagram);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIFELINE_ID:{
        GeneralOrdering(diagram);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void CombinedFragment(SequenceDiagramBuilder diagram) throws ParseException {LifelineInterval interval = new LifelineInterval();
        String operator = "";
        String id = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMBINED_FRAGMENT:{
      jj_consume_token(COMBINED_FRAGMENT);
      jj_consume_token(COMBINED_FRAGMENT_OPERATOR);
operator = backslashReplace(token.image.substring(0, token.image.length() - 1), "\\n", "\n", "\\;", ";", "\\~", "~");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIFELINE_ID:{
        id = LifelineId();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIFELINE_ID:{
          interval = LifelineInterval();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
diagram.beginCombinedFragment(interval.startId, interval.endId, id, operator);
      break;
      }
    case T_DASH:{
      jj_consume_token(T_DASH);
      jj_consume_token(T_DASH);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_EQ:{
        jj_consume_token(T_EQ);
        id = LifelineId();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
diagram.endCombinedFragment(id);
      break;
      }
    case T_DDOT:{
      jj_consume_token(T_DDOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_EQ:{
        jj_consume_token(T_EQ);
        id = LifelineId();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
diagram.endAndBeginOperand(id);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Message(SequenceDiagramBuilder diagram) throws ParseException {String leftLifelineId = null;
        String rightLifelineId = null;
        String leftLifelineLocalId = null;
        String rightLifelineLocalId = null;
        MessageArrowInfo messageArrowInfo;
        String msgText = "";
        int lostCount = 0;
        int foundCount = 0;
        int gateCount = 0;
        int duration = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIFELINE_ID:{
      leftLifelineId = LifelineId();
      if (jj_2_4(2)) {
        jj_consume_token(T_DOT);
        leftLifelineLocalId = LifelineId();
      } else {
        ;
      }
      break;
      }
    case LOST:{
      jj_consume_token(LOST);
leftLifelineId = "lost"; lostCount++;
      break;
      }
    case FOUND:{
      jj_consume_token(FOUND);
leftLifelineId = "found"; foundCount++;
      break;
      }
    case GATE:{
      jj_consume_token(GATE);
leftLifelineId = "gate"; gateCount++;
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    messageArrowInfo = MessageArrow();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIFELINE_ID:{
      rightLifelineId = LifelineId();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_DOT:{
        jj_consume_token(T_DOT);
        rightLifelineLocalId = LifelineId();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
      }
    case LOST:{
      jj_consume_token(LOST);
rightLifelineId = "lost"; lostCount++;
      break;
      }
    case FOUND:{
      jj_consume_token(FOUND);
rightLifelineId = "found"; foundCount++;
      break;
      }
    case GATE:{
      jj_consume_token(GATE);
rightLifelineId = "gate"; gateCount++;
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_DASH:
    case MESSAGE_DURATION_INC:{
      duration = MessageDuration();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXT_DELIMITER:{
      msgText = TextUntilNewLine();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
if(lostCount + foundCount + gateCount > 1) {
                        {if (true) throw new SequenceDiagramException("Error: 'lost', 'found' and 'gate' can only occur once per message.");}
                }
                String send;
                String receive;
                String sendLocalId;
                String receiveLocalId;
                if(messageArrowInfo.fromLeftToRight) {
                        send = leftLifelineId;
                        receive = rightLifelineId;
                        sendLocalId = leftLifelineLocalId;
                        receiveLocalId = rightLifelineLocalId;
                }
                else {
                        send = rightLifelineId;
                        receive = leftLifelineId;
                        sendLocalId = rightLifelineLocalId;
                        receiveLocalId = leftLifelineLocalId;
                }
                if(gateCount > 0) {
                        if(duration != 0) {
                                {if (true) throw new SequenceDiagramException("Error: a messages with a gate can only have a duration of 0, but the duration was " + duration + ".");}
                        }
                        if(send.equals("gate")) {
                                diagram.addSendGateMessage(receive, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, receiveLocalId);
                        }
                        else {
                                diagram.addReceiveGateMessage(send, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId);
                        }
                }
                else if(send.equals("lost")) {
                        {if (true) throw new SequenceDiagramException("Error: 'lost' can only be on the receiving end of a message.");}
                }
                else if(send.equals("found")) {
                        if(duration != 0) {
                                {if (true) throw new SequenceDiagramException("Error: 'lost' and 'found' messages can only have a duration of 0, but the duration was " + duration + ".");}
                        }
                        diagram.addFoundMessage(receive, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, receiveLocalId);
                }
                else
                {
                        if(receive.equals("lost")) {
                                if(duration != 0) {
                                        {if (true) throw new SequenceDiagramException("Error: 'lost' and 'found' messages can only have a duration of 0, but the duration was " + duration + ".");}
                                }
                                diagram.addLostMessage(send, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId);
                        }
                        else if(receive.equals("found")) {
                                {if (true) throw new SequenceDiagramException("Error: 'found' can only be on the sending end of a message.");}
                        }
                        else {
                                diagram.addMessage(send, receive, duration, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId, receiveLocalId);
                        }
                }
}

  final public MessageArrowInfo MessageArrow() throws ParseException {MessageArrowInfo messageArrowInfo = new MessageArrowInfo();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_DASH:
    case T_DOT:{
      messageArrowInfo.lineType = MessageArrowLineType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MESSAGE_ARROW_RIGHT_OPEN:{
        jj_consume_token(MESSAGE_ARROW_RIGHT_OPEN);
messageArrowInfo.arrowType = ArrowType.OPEN;
        break;
        }
      case MESSAGE_ARROW_RIGHT_FILLED:{
        jj_consume_token(MESSAGE_ARROW_RIGHT_FILLED);
messageArrowInfo.arrowType = ArrowType.FILLED;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
messageArrowInfo.fromLeftToRight = true;
      break;
      }
    case MESSAGE_ARROW_LEFT_OPEN:
    case MESSAGE_ARROW_LEFT_FILLED:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MESSAGE_ARROW_LEFT_OPEN:{
        jj_consume_token(MESSAGE_ARROW_LEFT_OPEN);
messageArrowInfo.arrowType = ArrowType.OPEN;
        break;
        }
      case MESSAGE_ARROW_LEFT_FILLED:{
        jj_consume_token(MESSAGE_ARROW_LEFT_FILLED);
messageArrowInfo.arrowType = ArrowType.FILLED;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      messageArrowInfo.lineType = MessageArrowLineType();
messageArrowInfo.fromLeftToRight = false;
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return messageArrowInfo;
}

  final public LineType MessageArrowLineType() throws ParseException {LineType lineType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_DASH:{
      jj_consume_token(T_DASH);
lineType = LineType.SOLID;
      break;
      }
    case T_DOT:{
      jj_consume_token(T_DOT);
lineType = LineType.DASHED;
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return lineType;
}

  final public int MessageDuration() throws ParseException {int duration;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MESSAGE_DURATION_INC:{
      jj_consume_token(MESSAGE_DURATION_INC);
duration = 1;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNSIGNED_INT_CONSTANT:{
        duration = unsignedIntConstant();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MESSAGE_DURATION_INC:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_6;
          }
          jj_consume_token(MESSAGE_DURATION_INC);
duration++;
        }
      }
      break;
      }
    case T_DASH:{
      jj_consume_token(T_DASH);
duration = -1;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNSIGNED_INT_CONSTANT:{
        duration = unsignedIntConstant();
duration = -duration;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case T_DASH:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_7;
          }
          jj_consume_token(T_DASH);
duration--;
        }
      }
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return duration;
}

  final public void GeneralOrdering(SequenceDiagramBuilder diagram) throws ParseException {String leftLifelineId = null;
        String rightLifelineId = null;
        String leftLifelineLocalId = null;
        String rightLifelineLocalId = null;
        boolean leftEarlier;
    leftLifelineId = LifelineId();
    jj_consume_token(T_DOT);
    leftLifelineLocalId = LifelineId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MESSAGE_ARROW_RIGHT_OPEN:{
      jj_consume_token(MESSAGE_ARROW_RIGHT_OPEN);
leftEarlier = true;
      break;
      }
    case MESSAGE_ARROW_LEFT_OPEN:{
      jj_consume_token(MESSAGE_ARROW_LEFT_OPEN);
leftEarlier = false;
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightLifelineId = LifelineId();
    jj_consume_token(T_DOT);
    rightLifelineLocalId = LifelineId();
if(leftEarlier) {
                        diagram.addGeneralOrdering(leftLifelineId, leftLifelineLocalId, rightLifelineId, rightLifelineLocalId);
                }
                else {
                        diagram.addGeneralOrdering(rightLifelineId, rightLifelineLocalId, leftLifelineId, leftLifelineLocalId);
                }
}

  final public void Coregion(SequenceDiagramBuilder diagram) throws ParseException {String lifelineId;
        boolean start;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case START_COREGION:{
      jj_consume_token(START_COREGION);
start = true;
      break;
      }
    case END_COREGION:{
      jj_consume_token(END_COREGION);
start = false;
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    lifelineId = LifelineId();
diagram.addCoregion(lifelineId, start);
}

  final public void DestroyLL(SequenceDiagramBuilder diagram) throws ParseException {String lifelineId;
    jj_consume_token(LL_DESTROY);
    lifelineId = LifelineId();
diagram.destroyLifeline(lifelineId);
}

  final public void ExecutionSpecification(SequenceDiagramBuilder diagram) throws ParseException {String lifelineId;
        boolean on;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXEC_SPEC_START:{
      jj_consume_token(EXEC_SPEC_START);
on = true;
      break;
      }
    case EXEC_SPEC_END:{
      jj_consume_token(EXEC_SPEC_END);
on = false;
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    lifelineId = LifelineId();
diagram.changeExecutionSpecification(lifelineId, on);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIST_DELIMITER:
      case LIFELINE_ID:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIST_DELIMITER:{
        jj_consume_token(LIST_DELIMITER);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      lifelineId = LifelineId();
diagram.changeExecutionSpecification(lifelineId, on);
    }
}

  final public void StateInvariant(SequenceDiagramBuilder diagram) throws ParseException {String lifelineId;
        String text = "";
        boolean stateStyle;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INVARIANT:{
      jj_consume_token(INVARIANT);
stateStyle = false;
      break;
      }
    case STATE_INVARIANT:{
      jj_consume_token(STATE_INVARIANT);
stateStyle = true;
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    lifelineId = LifelineId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXT_DELIMITER:{
      text = TextUntilNewLine();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
diagram.addStateInvariant(lifelineId, text, stateStyle);
}

  final public void TextOnLifeline(SequenceDiagramBuilder diagram) throws ParseException {String lifelineId;
        String text = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXT_ON_LIFELINE:{
      jj_consume_token(TEXT_ON_LIFELINE);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    lifelineId = LifelineId();
    text = TextUntilNewLine();
diagram.addTextOnLifeline(lifelineId, text);
}

  final public String TextUntilNewLine() throws ParseException {
    jj_consume_token(TEXT_DELIMITER);
    jj_consume_token(TEXT_UNTIL_NEXT_COMMAND);
return backslashReplace(token.image, "\\n", "\n", "\\;", ";");
}

  final public void InteractionUse(SequenceDiagramBuilder diagram) throws ParseException {LifelineInterval interval;
        String text = "";
    jj_consume_token(REF);
    interval = LifelineInterval();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXT_DELIMITER:{
      text = TextUntilNewLine();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
diagram.addInteractionUse(interval.startId, interval.endId, text);
}

  final public void Continuation(SequenceDiagramBuilder diagram) throws ParseException {LifelineInterval interval;
        String text = "";
    jj_consume_token(CONTINUATION);
    interval = LifelineInterval();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXT_DELIMITER:{
      text = TextUntilNewLine();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
diagram.addContinuation(interval.startId, interval.endId, text);
}

/**
 * @return the start and end of the interval.
 */
  final public LifelineInterval LifelineInterval() throws ParseException {LifelineInterval interval = new LifelineInterval();
    interval.startId = LifelineId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIST_DELIMITER:{
      jj_consume_token(LIST_DELIMITER);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    interval.endId = LifelineId();
return interval;
}

  final public boolean booleanConstant() throws ParseException {boolean value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:{
      jj_consume_token(FALSE);
value = false;
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
value = true;
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return value;
}

  final public int unsignedIntConstant() throws ParseException {
    jj_consume_token(UNSIGNED_INT_CONSTANT);
int value;
                try {
                        value = Integer.parseInt(token.image);
                } catch(NumberFormatException e) {
                        // only digits are accepted by the gramer, so the only reason for a NumberFormatException should be that the number is too big for int
                        {if (true) throw (ParseException) new ParseException("Error: The string '" + token.image + "' couldn't be parsed as integer. The most probable reason is that the number is too big.").initCause(e);}
                }
                return value;
//    throw new RuntimeException("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_MessageArrow_526_43_59()
 {
    if (jj_scan_token(MESSAGE_ARROW_LEFT_FILLED)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrow_525_41_58()
 {
    if (jj_scan_token(MESSAGE_ARROW_LEFT_OPEN)) return true;
    return false;
  }

  private boolean jj_3R_ExecutionSpecification_642_19_49()
 {
    if (jj_scan_token(EXEC_SPEC_END)) return true;
    return false;
  }

  private boolean jj_3R_Message_444_27_30()
 {
    if (jj_scan_token(GATE)) return true;
    return false;
  }

  private boolean jj_3R_MessageDuration_556_9_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageDuration_557_17_60()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageDuration_564_19_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_Message_443_27_29()
 {
    if (jj_scan_token(FOUND)) return true;
    return false;
  }

  private boolean jj_3R_Message_442_27_28()
 {
    if (jj_scan_token(LOST)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrowLineType_544_19_64()
 {
    if (jj_scan_token(T_DOT)) return true;
    return false;
  }

  private boolean jj_3R_ExecutionSpecification_641_17_48()
 {
    if (jj_scan_token(EXEC_SPEC_START)) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_363_9_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SequenceElement_364_17_13()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_365_19_14()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_366_19_15()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_367_19_16()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_368_19_17()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_370_19_18()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_371_19_19()) {
    jj_scanpos = xsp;
    if (jj_3R_SequenceElement_372_19_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Message_441_25_27()
 {
    if (jj_3R_LifelineId_329_9_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Message_441_57_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MessageArrowLineType_543_17_63()
 {
    if (jj_scan_token(T_DASH)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrow_517_43_57()
 {
    if (jj_scan_token(MESSAGE_ARROW_RIGHT_FILLED)) return true;
    return false;
  }

  private boolean jj_3R_Message_447_18_32()
 {
    if (jj_3R_TextUntilNewLine_691_9_21()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(COMMAND_DELIMITER)) return true;
    if (jj_3R_SequenceElement_363_9_9()) return true;
    return false;
  }

  private boolean jj_3R_Message_437_27_25()
 {
    if (jj_scan_token(GATE)) return true;
    return false;
  }

  private boolean jj_3R_Message_446_18_31()
 {
    if (jj_3R_MessageDuration_556_9_44()) return true;
    return false;
  }

  private boolean jj_3R_Message_436_27_24()
 {
    if (jj_scan_token(FOUND)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrow_516_41_56()
 {
    if (jj_scan_token(MESSAGE_ARROW_RIGHT_OPEN)) return true;
    return false;
  }

  private boolean jj_3R_Message_435_27_23()
 {
    if (jj_scan_token(LOST)) return true;
    return false;
  }

  private boolean jj_3R_Message_434_25_22()
 {
    if (jj_3R_LifelineId_329_9_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExecutionSpecification_640_9_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExecutionSpecification_641_17_48()) {
    jj_scanpos = xsp;
    if (jj_3R_ExecutionSpecification_642_19_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_MessageArrowLineType_542_9_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageArrowLineType_543_17_63()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageArrowLineType_544_19_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_MessageArrow_523_27_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageArrow_525_41_58()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageArrow_526_43_59()) return true;
    }
    if (jj_3R_MessageArrowLineType_542_9_55()) return true;
    return false;
  }

  private boolean jj_3R_DestroyLL_627_9_35()
 {
    if (jj_scan_token(LL_DESTROY)) return true;
    return false;
  }

  private boolean jj_3R_Continuation_720_9_39()
 {
    if (jj_scan_token(CONTINUATION)) return true;
    return false;
  }

  private boolean jj_3R_Coregion_614_19_47()
 {
    if (jj_scan_token(END_COREGION)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrow_513_25_41()
 {
    if (jj_3R_MessageArrowLineType_542_9_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageArrow_516_41_56()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageArrow_517_43_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_Message_432_9_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Message_434_25_22()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_435_27_23()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_436_27_24()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_437_27_25()) return true;
    }
    }
    }
    if (jj_3R_MessageArrow_512_17_26()) return true;
    xsp = jj_scanpos;
    if (jj_3R_Message_441_25_27()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_442_27_28()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_443_27_29()) {
    jj_scanpos = xsp;
    if (jj_3R_Message_444_27_30()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_Message_446_18_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_Message_447_18_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Coregion_613_17_46()
 {
    if (jj_scan_token(START_COREGION)) return true;
    return false;
  }

  private boolean jj_3R_MessageArrow_512_17_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageArrow_513_25_41()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageArrow_523_27_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_LifelineId_329_9_12()
 {
    if (jj_scan_token(LIFELINE_ID)) return true;
    return false;
  }

  private boolean jj_3R_Coregion_612_9_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Coregion_613_17_46()) {
    jj_scanpos = xsp;
    if (jj_3R_Coregion_614_19_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_InteractionUse_704_9_38()
 {
    if (jj_scan_token(REF)) return true;
    return false;
  }

  private boolean jj_3R_CombinedFragment_412_11_54()
 {
    if (jj_scan_token(T_DDOT)) return true;
    return false;
  }

  private boolean jj_3R_CombinedFragment_408_11_53()
 {
    if (jj_scan_token(T_DASH)) return true;
    return false;
  }

  private boolean jj_3R_TextUntilNewLine_691_9_21()
 {
    if (jj_scan_token(TEXT_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_GeneralOrdering_586_9_62()
 {
    if (jj_3R_LifelineId_329_9_12()) return true;
    return false;
  }

  private boolean jj_3R_CombinedFragment_396_9_52()
 {
    if (jj_scan_token(COMBINED_FRAGMENT)) return true;
    return false;
  }

  private boolean jj_3R_CombinedFragment_396_9_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CombinedFragment_396_9_52()) {
    jj_scanpos = xsp;
    if (jj_3R_CombinedFragment_408_11_53()) {
    jj_scanpos = xsp;
    if (jj_3R_CombinedFragment_412_11_54()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Message_441_57_43()
 {
    if (jj_scan_token(T_DOT)) return true;
    return false;
  }

  private boolean jj_3R_TextOnLifeline_679_9_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_LifelineId_329_9_12()) return true;
    if (jj_3R_TextUntilNewLine_691_9_21()) return true;
    return false;
  }

  private boolean jj_3R_StateInvariant_664_19_51()
 {
    if (jj_scan_token(STATE_INVARIANT)) return true;
    return false;
  }

  private boolean jj_3R_MessageOrGeneralOrderingOrText_386_11_45()
 {
    if (jj_3R_GeneralOrdering_586_9_62()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_Message_432_9_11()) return true;
    return false;
  }

  private boolean jj_3R_StateInvariant_663_17_50()
 {
    if (jj_scan_token(INVARIANT)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(T_DOT)) return true;
    if (jj_3R_LifelineId_329_9_12()) return true;
    return false;
  }

  private boolean jj_3R_MessageDuration_564_19_61()
 {
    if (jj_scan_token(T_DASH)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_TextOnLifeline_679_9_10()) return true;
    return false;
  }

  private boolean jj_3R_MessageOrGeneralOrderingOrText_384_9_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_MessageOrGeneralOrderingOrText_386_11_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_SequenceElement_372_19_20()
 {
    if (jj_3R_CombinedFragment_396_9_40()) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_371_19_19()
 {
    if (jj_3R_Continuation_720_9_39()) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_370_19_18()
 {
    if (jj_3R_InteractionUse_704_9_38()) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_368_19_17()
 {
    if (jj_3R_StateInvariant_662_9_37()) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_367_19_16()
 {
    if (jj_3R_ExecutionSpecification_640_9_36()) return true;
    return false;
  }

  private boolean jj_3R_StateInvariant_662_9_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StateInvariant_663_17_50()) {
    jj_scanpos = xsp;
    if (jj_3R_StateInvariant_664_19_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_SequenceElement_366_19_15()
 {
    if (jj_3R_DestroyLL_627_9_35()) return true;
    return false;
  }

  private boolean jj_3R_MessageDuration_557_17_60()
 {
    if (jj_scan_token(MESSAGE_DURATION_INC)) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_365_19_14()
 {
    if (jj_3R_Coregion_612_9_34()) return true;
    return false;
  }

  private boolean jj_3R_SequenceElement_364_17_13()
 {
    if (jj_3R_MessageOrGeneralOrderingOrText_384_9_33()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SequenceAllInOneParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1cc0,0x1cc0,0x0,0x2000,0xc0,0x8000,0x0,0xf0000,0xf0000,0x14000000,0x2000000,0x14000000,0x0,0x14000000,0x0,0x0,0x0,0x20000000,0x20000000,0x14000000,0x0,0x8000000,0x0,0x4000000,0x200000,0x0,0xc0000000,0xcc000000,0xc000000,0x0,0x0,0x4000000,0x0,0x4000000,0x40000000,0x0,0x0,0x400000,0x400000,0x0,0x200000,0x0,0x200000,0x200000,0x400000,0x300,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x2000000,0x0,0x0,0x0,0x200000,0x0,0x0,0x33fff8,0x0,0x33fff8,0x80000,0x22fff8,0x200000,0x200000,0x200000,0x0,0x0,0x20000,0x200038,0x0,0x200038,0x4,0x0,0x3,0x0,0x0,0x0,0x4,0x80000,0x0,0x80000,0x4,0x1,0xc0,0xc00,0x200000,0x0,0x300,0x0,0x8000,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public SequenceAllInOneParser(Provider stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new SequenceAllInOneParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SequenceAllInOneParser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SequenceAllInOneParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SequenceAllInOneParser(SequenceAllInOneParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SequenceAllInOneParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[58];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 46; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 58; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : SequenceAllInOneParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
